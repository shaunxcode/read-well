// Generated by CoffeeScript 1.5.0
(function() {
  var $code, $comments, $scroller, $win, Comment, code, commentStack, oldLineCount, styles;

  styles = document.styleSheets[0];

  Comment = (function() {

    Comment.prototype.focus = function() {
      return this.commentsWrapper.focus();
    };

    function Comment(line) {
      var rule,
        _this = this;
      this.line = line;
      this.commentsWrapper = $("<div />").addClass("comment").appendTo("#comments").hallo({
        plugins: {
          halloformat: {},
          halloblock: {}
        }
      });
      styles.insertRule(".line" + this.line + " { height: 1.25em; }", styles.rules.length);
      rule = styles.rules[styles.rules.length - 1];
      this.commentsWrapper.on("keyup", function() {
        return rule.style.height = "" + (_this.commentsWrapper.outerHeight()) + "px";
      });
      this.commentsWrapper.trigger("keyup");
    }

    return Comment;

  })();

  code = CodeMirror(document.getElementById("code"), {
    lineNumbers: true
  });

  commentStack = [];

  $comments = $("#comments").on("scroll", function() {
    return code.scrollTo(null, $comments.scrollTop());
  });

  oldLineCount = false;

  code.on("change", function() {
    var l, newLineCount, _i, _ref, _results;
    newLineCount = code.lineCount();
    if (newLineCount !== oldLineCount) {
      oldLineCount = newLineCount;
      _results = [];
      for (l = _i = 0, _ref = newLineCount - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; l = 0 <= _ref ? ++_i : --_i) {
        _results.push(code.addLineClass(l, "wrap", "line" + l));
      }
      return _results;
    }
  });

  code.on("gutterClick", function(cm, line, event) {
    var l, _i, _ref;
    if (!commentStack[line]) {
      for (l = _i = _ref = commentStack.length; _ref <= line ? _i <= line : _i >= line; l = _ref <= line ? ++_i : --_i) {
        commentStack[line] = new Comment(l);
      }
    }
    return commentStack[line].focus();
  });

  code.on("focus", function() {
    return code.setValue(code.getValue());
  });

  code.on("scroll", function() {
    return $comments.scrollTop(code.getScrollInfo().top);
  });

  code.setValue("this is some words and that\nand some more words\nand\nmore\nlines");

  $code = $("#code");

  $scroller = $(".CodeMirror, .CodeMirror-scroll", $code);

  $win = $(window).on("resize", function() {
    $comments.css({
      height: $win.innerHeight()
    });
    $scroller.css({
      height: $win.innerHeight()
    });
    return $scroller.css({
      width: $win.innerWidth() - $comments.outerWidth() - 5
    });
  });

  $(function() {
    return $win.trigger("resize");
  });

}).call(this);
