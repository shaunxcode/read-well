// Generated by CoffeeScript 1.3.3
(function() {

  $(function() {
    var activeLine, addLine, editCell, editor, marginCell, mergeControl, tools;
    tools = $("<div />").appendTo("body");
    tools.append($("<button />").text("import"), $("<button />").text("export"));
    tools.hide();
    editor = $("<table />").appendTo("body");
    activeLine = false;
    editCell = function(line) {
      var cell, input, remove;
      cell = $("<td />").addClass('code').append(input = $("<input />"));
      cell.input = input;
      cell.on('click', function() {
        return cell.focus();
      });
      cell.val = function(v) {
        if (v) {
          return input.val(v);
        } else {
          return input.val();
        }
      };
      cell.focus = function() {
        input.focus();
        activeLine = line;
        return mergeControl.hide();
      };
      remove = false;
      input.on('keydown', function(e) {
        var caretPos, chars, comment, curSpace, nextComment, oldNext, remainingChars, row, rowSpannedComment, start, val;
        if (e.keyCode === 9) {
          e.preventDefault();
          start = input.get(0).selectionStart;
          chars = input.val();
          input.val(chars.substring(0, start) + "\t" + chars.substring(start, chars.length));
          input.get(0).setSelectionRange(start + 1, start + 1);
        }
        if (e.keyCode === 38 && line.prior) {
          e.preventDefault();
          start = input.get(0).selectionStart;
          line.prior.code.focus();
          line.prior.code.input.get(0).setSelectionRange(start, start);
        }
        if (e.keyCode === 40 && line.next) {
          e.preventDefault();
          start = input.get(0).selectionStart;
          line.next.code.focus();
          line.next.code.input.get(0).setSelectionRange(start, start);
        }
        if (e.keyCode === 8 && input.get(0).selectionStart === 0 && line.prior) {
          if (remove || input.val().length) {
            e.preventDefault();
            line.prior.next = line.next;
            line.next.prior = line.prior;
            val = input.val();
            if (val.replace(/\s+/, '').length) {
              line.prior.code.val(line.prior.code.val() + val);
            }
            rowSpannedComment = line.code.prev('.margin[rowspan]');
            if (rowSpannedComment.length) {
              nextComment = $(".margin", line.next.container);
              if (nextComment.length) {
                nextComment.prepend(rowSpannedComment.html());
                nextComment.attr("rowspan", nextComment.attr("rowspan") + rowSpannedComment.attr("rowspan") - 1);
              } else {
                rowSpannedComment.attr("rowspan", parseInt(rowSpannedComment.attr("rowspan")) - 1);
                line.next.container.prepend(rowSpannedComment);
              }
            }
            row = line.code.parent();
            while (!(comment != null ? comment.length : void 0)) {
              comment = $(".margin", row);
              if (!comment.length) {
                row = row.prev();
              }
            }
            if ((comment.attr("rowspan") || 1) > 1) {
              comment.attr("rowspan", parseInt(comment.attr("rowspan")) - 1);
            }
            line.container.remove();
            line.prior.code.focus();
            caretPos = line.prior.code.val().length - val.length;
            line.prior.code.input.get(0).setSelectionRange(caretPos, caretPos);
            activeLine = line.prior;
          } else {
            remove = true;
            return;
          }
        }
        if (e.keyCode === 13) {
          oldNext = line.next;
          oldNext.prior = line.next = addLine();
          line.next.next = oldNext;
          row = line.code.parent();
          while (!(comment != null ? comment.length : void 0)) {
            comment = $(".margin", row);
            if (!comment.length) {
              row = row.prev();
            }
          }
          if ((comment.attr("rowspan") || 1) > 1) {
            line.next.comment.remove();
            comment.attr("rowspan", parseInt(comment.attr("rowspan")) + 1);
          }
          remainingChars = input.val().substring(input.get(0).selectionStart, input.val().length);
          if (remainingChars.length) {
            line.next.code.val(remainingChars);
            input.val(input.val().substring(0, input.get(0).selectionStart));
            line.next.code.input.focus();
            line.next.code.input.get(0).setSelectionRange(0, 0);
          } else {
            curSpace = input.val().match(/^\s+/);
            if (curSpace != null ? curSpace.length : void 0) {
              line.next.code.val(curSpace[0]);
            }
            line.next.code.focus();
          }
        }
        remove = false;
        return true;
      });
      return cell;
    };
    mergeControl = $("<div />").addClass("mergeControl").appendTo("body").hide().text("[merge]").on({
      click: function() {
        var cell, cells, content, row, rowSpan, _i, _len;
        cells = [];
        row = mergeControl.mergeWithEl.parent();
        while (row.length) {
          if (!row.length) {
            break;
          }
          cell = $(".margin", row);
          if (cell.length) {
            if (cell.get(0) === activeLine.comment.get(0)) {
              break;
            }
            cells.push(cell);
          }
          row = row.prev();
        }
        rowSpan = parseInt(activeLine.comment.attr("rowspan")) || 1;
        content = [];
        if (cells.length) {
          for (_i = 0, _len = cells.length; _i < _len; _i++) {
            cell = cells[_i];
            if (cell.html().length) {
              content.unshift(cell.html());
            }
            rowSpan += parseInt(cell.attr("rowspan")) || 1;
            cell.remove();
          }
        }
        if (content.length) {
          content.unshift("");
        }
        activeLine.comment.attr("rowspan", rowSpan).append(content.join("<br />"));
        mergeControl.hide();
        return activeLine.comment.focus();
      }
    });
    mergeControl.reposition = function() {
      return mergeControl.css({
        left: mergeControl.mergeWithEl.offset().left + 30,
        top: mergeControl.mergeWithEl.offset().top
      });
    };
    marginCell = function(line) {
      var cell;
      cell = $("<td />").addClass("margin").attr({
        contentEditable: true
      });
      cell.on({
        mouseenter: function(e) {
          var el;
          el = $(this);
          if ((!(activeLine.comment.parent().get(0) != null)) || el.parent().get(0).rowIndex < activeLine.comment.parent().get(0).rowIndex) {
            return;
          }
          if (el.is(':empty') && this !== activeLine.comment.get(0) && activeLine.comment.is(':focus')) {
            mergeControl.mergeWithEl = el;
            return mergeControl.show().reposition();
          }
        },
        focus: function(e) {
          mergeControl.hide();
          return activeLine = line;
        },
        blur: function(e) {},
        keyup: function(e) {
          var at_end, at_start, next_text, post_range, pre_range, range, this_text;
          range = window.getSelection().getRangeAt(0);
          pre_range = document.createRange();
          pre_range.selectNodeContents(this);
          pre_range.setEnd(range.startContainer, range.startOffset);
          this_text = pre_range.cloneContents();
          at_start = this_text.textContent.length === 0;
          post_range = document.createRange();
          post_range.selectNodeContents(this);
          post_range.setStart(range.endContainer, range.endOffset);
          next_text = post_range.cloneContents();
          at_end = next_text.textContent.length === 0;
          if (e.keyCode === 8 && $(this).text().length === 0) {
            $(this).html('');
          }
          if (e.keyCode === 38 && at_start && line.prior) {
            line.prior.comment.focus();
            activeLine = line.prior;
          }
          if (e.keyCode === 40 && at_end && line.next) {
            line.next.comment.focus();
            activeLine = line.next;
          }
          if ((e.keyCode === 13 || e.keyCode === 8) && mergeControl.is(':visible')) {
            return mergeControl.reposition();
          }
        }
      });
      return cell;
    };
    addLine = function() {
      var line;
      line = {
        prior: activeLine,
        next: false
      };
      line.container = $("<tr />").append(line.comment = marginCell(line), line.code = editCell(line));
      line.comment.hallo({
        plugins: {
          halloformat: {},
          halloblock: {},
          hallojustify: {}
        }
      });
      if (activeLine) {
        activeLine.container.after(line.container);
      } else {
        editor.append(line.container);
      }
      return line;
    };
    activeLine = addLine();
    activeLine.comment.html("<h1>YourFileName.here</h1>Some sort of description");
    return activeLine.code.focus();
  });

}).call(this);
